<?xml version="1.0" encoding="utf-8"?>
<document>
    <properties>
        <title>News</title>
        <author>CHOCO Development Team</author>
    </properties>
    <body>

        <section name="News">
            <subsection name="CP-VIZ: An Open Source Visualization Platform for CP">
                <p>
                    Charles Prud'homme -- 12/13/2010
                </p>
                <p>
                    We currently have the pleasure to welcome Helmut Simonis at Ecole des Mines. As part of the
                    collaboration, the old OADymPAC-based tracer module has been replaced by a brand new one: CPVisu
                    tracer. CPVisu allows the production of three data files: the tree search, the states of constraints
                    and variables at different points of computations, and a configuration file. These files can be
                    interpreted using the
                    <a href="https://sourceforge.net/projects/cpviz/">cpviz</a>
                    java library for post-mortem analysis.
                    <br/>
                    As for now, the tree search data file is available and can be exploited.
                    Most of the declared states of constraints and variables are defined and can be used safely (some
                    few are missing).
                    <br/>
                    The CPVisu tracer module uses AOP (Aspect-Oriented Programming), weaves the choco-solver class files
                    to produce a modified JAR for logging. Thus, you need to add the followin jars to your classpath:
                    <a href="http://www.aspectj.org/">AspectJ</a>
                    and<a href="http://logback.qos.ch/">Logback</a>.
                </p>

                <p>
                    Here is an example code of the SendMoreMoney problem with logging statements
                </p>
                <source>
                    Model model;
                    IntegerVariable S, E, N, D, M, O, R, Y;
                    IntegerVariable[] SEND, MORE, MONEY;

                    model = new CPModel();

                    S = makeIntVar("S", 0, 9);
                    E = makeIntVar("E", 0, 9);
                    N = makeIntVar("N", 0, 9);
                    D = makeIntVar("D", 0, 9);
                    M = makeIntVar("M", 0, 9);
                    O = makeIntVar("0", 0, 9);
                    R = makeIntVar("R", 0, 9);
                    Y = makeIntVar("Y", 0, 9);
                    SEND = new IntegerVariable[]{S, E, N, D};
                    MORE = new IntegerVariable[]{M, O, R, E};
                    MONEY = new IntegerVariable[]{M, O, N, E, Y};

                    model.addConstraints(neq(S, 0), neq(M, 0));
                    model.addConstraint(allDifferent(S, E, N, D, M, O, R, Y));
                    model.addConstraints(
                    eq(plus(scalar(new int[]{1000, 100, 10, 1}, SEND),
                    scalar(new int[]{1000, 100, 10, 1}, MORE)),
                    scalar(new int[]{10000, 1000, 100, 10, 1}, MONEY))
                    );

                    Solver solver = new CPSolver();
                    solver.read(model);

                    // Creation of the visualization wrapper
                    Visualization visu = new Visualization("SendMoreMoney", solver, "./out");

                    visu.createTree(); // declare tree tool
                    visu.createViz(); // declare viz tool

                    // declare of specialized visualizer for variables states
                    Vector visualizer = new Vector(solver.getVar(S,E,N,D,M,O,R,Y), "expanded", 0, 0, 8, 10, "SENDMORY", 0, 9);

                    // add the vector visualizer to the viz tool
                    visu.addVisualizer(visualizer);

                    solver.solve();

                    // close the XML files safely
                    visu.close();
                </source>

            </subsection>
        </section>
    </body>
</document>

