        //0- declare parameters
        int DAY = 0;
        int NIGHT = 1;
        int REST = 2;
        //1- create the model
        Model m = new CPModel();
        int nTime = 14; // 2 weeks: 14 days
        int nAct = 3; // 3 activities: DAY, NIGHT, REST
        int nRes = 4; // 4 resources: cost (0), #DAY (1), #NIGHT (2), #WORK (3)
        //2- Create the schedule variables: the activity processed at each time slot
        IntegerVariable[] sequence = makeIntVarArray("x", nTime, 0, nAct - 1, CPOptions.V_ENUM);
        // - create the cost variables (one for each resource)
        IntegerVariable[] bounds = new IntegerVariable[4];
        bounds[0] = makeIntVar("z_0", 30, 80, CPOptions.V_BOUND); // 30 <= cost <= 80
        bounds[1] = makeIntVar("day", 0, 7, CPOptions.V_BOUND); // 0 <= #DAY <= 7
        bounds[2] = makeIntVar("night", 3, 7, CPOptions.V_BOUND); // 3 <= #NIGHT <= 7
        bounds[3] = makeIntVar("work", 7, 9, CPOptions.V_BOUND); // 7 <= #WORK <= 9
        //3- Create the automaton
        FiniteAutomaton auto = new FiniteAutomaton();
        // state 0: starting and accepting state
        int start = auto.addState();
        auto.setInitialState(start);
        auto.setFinal(start);
        // state 1 and a transition (0,DAY,1)
        int first = auto.addState();
        auto.addTransition(start, first, DAY);
        // state 2 and transitions (1,DAY,2), (1,NIGHT,2), (2,REST,0), (0,NIGHT,2)
        int second = auto.addState();
        auto.addTransition(first, second, DAY, NIGHT);
        auto.addTransition(second, start, REST);
        auto.addTransition(start, second, NIGHT);
        //4- Declare the assignment/transition costs:
        // csts[i][j][s][r]: cost on resource r of assigning Xi to activity j at state s
        int[][][][] csts = new int[nTime][nAct][auto.getNbStates()][nRes];
        for (int i = 0; i < csts.length; i++) {
            csts[i][DAY][0] = new int[]{3, 1, 0, 1}; // costs of transition (0,DAY,1)
            csts[i][NIGHT][0] = new int[]{8, 0, 1, 1}; // costs of transition (0,NIGHT,2)
            csts[i][DAY][1] = new int[]{5, 1, 0, 1}; // costs of transition (1,DAY,2)
            csts[i][NIGHT][1] = new int[]{9, 0, 1, 1}; // costs of transition (1,NIGHT,2)
            csts[i][REST][2] = new int[]{2, 0, 0, 0}; // costs of transition (2,REST,0)
        }

        //5- add the constraint
        m.addConstraint(multiCostRegular(sequence, bounds, auto, csts));
        //6- create the solver, read the model and solve it
        Solver s = new CPSolver();
        s.read(m);
        s.solve();
