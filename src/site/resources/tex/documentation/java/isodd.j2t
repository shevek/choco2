public class IsOdd extends AbstractUnIntSConstraint {

    @Override
    public int getFilteredEventMask(int idx) {
        return IntVarEvent.INSTINTbitvector;
    }

        public IsOdd(IntDomainVar v0) {
            super(v0);
        }

        /**
         * Default initial propagation: full constraint re-propagation.
         */

        public void awake() throws ContradictionException {
            DisposableIntIterator it = v0.getDomain().getIterator();
            try{
                while(it.hasNext()){
                    int val = it.next();
                    if(val%2==0){
                        v0.removeVal(val, cIdx0);
                    }
                }
            }finally {
                it.dispose();
            }
        }

        /**
         * <i>Propagation:</i>
         * Propagating the constraint until local consistency is reached.
         *
         * @throws ContradictionException
         *          contradiction exception
         */

        public void propagate() throws ContradictionException {
            if(v0.isInstantiated()){
                if(v0.getVal()%2==0){
                    fail();
                }
            }
        }


    }
