<project name="JChoco" default="help" basedir=".">

	<!--
	  	 12/06/08 : uses private public target for help message
	  	 			add targets (init, exec-cpd, exec-pmd, exec-junit-test)
	  	 28/06/08 : upgrade target dist
	   -->

	<!-- =================================
	          PROPERTIES
	         ================================= -->
	<!-- set global properties for this build -->

	<property name="release" value="2" />
	<property name="version" value="0" />
	<property name="nightly" value="0" />
	<property name="jdk.source" value="1.6" />
    <property name="jdkVersion" value="6" />
    <property name="suffix" value="-${release}.${version}.${nightly}" />

    <!-- directory -->
	<property name="dev" value="dev" />
	<property name="src" value="${dev}/src" />
    <property name="test" value="${dev}/test" />

    <property name="doc" value="doc" />
	<property name="build" value="classes" />
	<property name="lib" value="lib" />
	<property name="dist" value="dist" />

	<!-- other -->
	<property name="junit.reports" location="${doc}${file.separator}junit-html" />


	<!-- package -->
	<property name="palm" value="src/choco/palm/**" />
	<property name="samples" value="src/samples/**" />
    <property name="seminar" value="src/samples/seminar/**" />
    <property name="junit" value="test/**" />

	<!-- should be in a choco.properties -->
	<property name="choco.ruleset" value="choco-ruleset.xml" />
	<property name="lib.junit" value="${lib}/junit-4.4.jar" />
	<property name="lib.automaton" value="${lib}/automaton.jar" />
	<property name="pmd.priority" value="2" />
	<property name="pmd.xslt" location="/opt/pmd-4.1/etc/xslt/wz-pmd-report.xslt" />
	<property name="lib.animation" value="${lib}/animation.jar" />
	<property name="lib.physics" value="${lib}/physics.jar" />
	<property name="lib.core" value="${lib}/core.jar" />



	<!-- =================================
          target: help
         ================================= -->
	<target name="help" depends="init" description="--> print this help">
		<echo>be careful, there could have a bug in eclipse with this help message.
In this case, type "ant -p popart/build.xml" in a terminal.     </echo>
		<exec executable="ant">
			<arg value="-p" />
		</exec>
	</target>

	<!-- - - - - - - - - - - - - - - - - -
	          target: init
	         - - - - - - - - - - - - - - - - - -->

	<target name="init">
		<echo message="Ant  version                  : ${ant.version}" />
		<echo message="Java version                  : ${java.version}" />
		<tstamp />
		<echo message="build of project ${ant.project.name} : ${TODAY}" />
	</target>


	<!-- - - - - - - - - - - - - - - - - -
	          target: chocoMkdir
	         - - - - - - - - - - - - - - - - - -->

	<target name="chocoMkdir" depends="docMkdir">
		<!-- Create the time stamp -->
		<tstamp />
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build}" />
		<mkdir dir="${dist}" />
	</target>

	<!-- - - - - - - - - - - - - - - - - -
          target: docMkdir
         - - - - - - - - - - - - - - - - - -->
	<target name="docMkdir">
		<mkdir dir="${doc}" />
	</target>


	<!-- =================================
		          target: clean
		         ================================= -->

	<target name="clean" description="--> deletes everything that seems useless">
		<!-- Delete the ${build} directory trees -->
		<delete dir="${build}" failonerror="false" />
		<delete dir="${doc}" failonerror="false" />
		<delete dir="${dist}" failonerror="false" />
	</target>


	<!-- =================================
	          target: compile
	         ================================= -->

	<path id="choco.classpath">
		<pathelement location="${build}" />
		<pathelement location="${lib.junit}" />
		<pathelement location="${lib.automaton}" />
		<pathelement location="${lib.animation}" />
		<pathelement location="${lib.physics}" />
		<pathelement location="${lib.core}" />
	</path>

	<target name="compile" depends="init,chocoMkdir" description="--> compiles everything">
		<!-- Compile the java code from ${src} into ${build} -->
		<javac srcdir="${src}" destdir="${build}" source="${jdk.source}" encoding="UTF-8">
			<classpath refid="choco.classpath" />
		</javac>
		<echo message="successfull compilation" />
	</target>

	<!-- =================================
		          target: doc
		         ================================= -->

    <target name="doc" description="--> generates the javadoc">
		<javadoc sourcepath="${src}" destdir="${doc}/api" source="${jdkVersion}" useexternalfile="true" splitindex="true" protected="true" packagenames="choco.*" classpathref="choco.classpath" excludepackagenames="choco.palm.*,palm.palm.*">
		</javadoc>
	</target>



	<!-- =================================
			          target: dist
			         ================================= -->


	<!--<property name="samples.main" value="samples.bpp/BinPackingExample"/> -->

	<property name="samples.main" value="samples.DemoFrame" />

	<target name="dist" depends="clean,compile,doc" description="--> makes the distribution package (jar, zip, doc.zip)">
	  <input
	    message="Do you set Choco.DEBUG to false (y/n)?"
	    validargs="y,n"
	    addproperty="do.continue"
	  />
	  <condition property="do.fail">
	    <equals arg1="n" arg2="${do.continue}"/>
	  </condition>
	  <fail if="do.fail">Set Choco.DEBUG to false to continue.</fail>
        <copy file="${lib.automaton}" todir="${dist}/${lib}" />
		<jar destfile="${dist}/choco${suffix}.jar">
			<fileset dir="${build}">
				<include name="**/*.class" />
				<exclude name="${palm}" />
				<exclude name="${samples}" />
				<exclude name="${test}" />
			</fileset>
			<manifest>
				<attribute name="Built-By" value="Choco administrators" />
				<attribute name="Class-Path" value="${lib.automaton}" />
			</manifest>
		</jar>
		<zip zipfile="${dist}/chocosrc${suffix}.zip">
			<zipfileset dir="${dev}">
				<include name="**/*.java" />
				<exclude name="${palm}" />
				<exclude name="${samples}" />
				<exclude name="${junit}" />
			</zipfileset>
			<fileset file="${dist}/choco${suffix}.jar" />
			<fileset file="${dist}/${lib}/**" />
			<!--intÃ©grer la librairie ou le marquer dans un README	<fileset file="${lib.automaton}" /> -->
		</zip>
		<jar destfile="${dist}/chocosamples${suffix}.jar">
			<fileset dir="${build}">
				<include name="${samples}/*.class" />
			</fileset>
			<manifest>
				<attribute name="Built-By" value="Choco administrators" />
				<attribute name="Main-Class" value="${samples.main}" />
				<attribute name="Class-Path" value="choco${suffix}.jar" />
			</manifest>
		</jar>
		<zip zipfile="${dist}/chocosamples${suffix}.zip">
			<fileset dir="${dev}">
				<include name="${samples}/*.java" />
			</fileset>
			<fileset dir="${dist}">
				<include name="chocosamples${suffix}.jar" />
			</fileset>
		</zip>
		<zip zipfile="${dist}/chocodoc${suffix}.zip">
			<fileset dir="${doc}">
				<include name="api/**" />
				<include name="userguide.pdf" />
			</fileset>
		</zip>
        <antcall target="zip-website-examples" />

    </target>


    <target name="zip-website-examples" description="zip examples files">
        <mkdir dir="${dist}/examples/" />
        <zip zipfile="${dist}/examples/ExMagicSquare.zip">
            <fileset dir="${dev}">
				<include name="${seminar}/ExMagicSquare.java" />
			</fileset>
        </zip>
        <zip zipfile="${dist}/examples/ExDonaldGeraldRobert.zip">
            <fileset dir="${dev}">
				<include name="${seminar}/ExDonaldGeraldRobert.java" />
			</fileset>
        </zip>
        <zip zipfile="${dist}/examples/ExKnapSack.zip">
            <fileset dir="${dev}">
				<include name="${seminar}/ExKnapSack.java" />
			</fileset>
        </zip>
        <zip zipfile="${dist}/examples/ExSudoku.zip">
            <fileset dir="${dev}">
				<include name="${seminar}/sudoku/*.*" />
			</fileset>
        </zip>
        <zip zipfile="${dist}/examples/ExQueen.zip">
            <fileset dir="${dev}">
				<include name="${seminar}/nqueen/*.*" />
			</fileset>
        </zip>
        <zip zipfile="${dist}/examples/BinPackingv2.zip">
            <fileset dir="${dev}">
				<include name="${seminar}/binpacking/*.*" />
			</fileset>
        </zip>
        <zip zipfile="${dist}/examples/SocialGolferv2.zip">
            <fileset dir="${dev}">
				<include name="${seminar}/socialgolfer/*.*" />
			</fileset>
        </zip>
        <zip zipfile="${dist}/examples/ExTSP.zip">
            <fileset dir="${dev}">
				<include name="${seminar}/tsp/*.*" />
			</fileset>
        </zip>
        <zip zipfile="${dist}/examples/allExercises.zip">
            <fileset dir="${dev}">
				<include name="${seminar}/*.*" />
                <exclude name="${seminar}/ConstraintPattern.java" />
            </fileset>
        </zip>


    </target>


    <target name="dotsolver" description="make dotsolver" depends="clean, compile">
        <jar destfile="${dist}/dotsolver.jar">
			<fileset dir="${build}/choco/cp/solver/dotsolver/">
				<include name="**/*.class" />
			</fileset>
			<manifest>
				<attribute name="Built-By" value="Choco administrators" />
				<attribute name="Class-Path" value="${lib.automaton}" />
			</manifest>
		</jar>
        <zip zipfile="${dist}/dotsolver.zip">
            <fileset dir="${dist}">
				<include name="dotsolver.jar" />
            </fileset>
        </zip>
    </target>

    <!-- - - - - - - - - - - - - - - - - -
          target: jar-4-test
         - - - - - - - - - - - - - - - - - -->
     <target name="jar-4-test" depends="clean,compile">
		<copy file="${lib.automaton}" todir="${dist}/${lib}" />
		<jar destfile="${dist}/choco${suffix}.jar">
			<fileset dir="${build}">
				<include name="**/*.class" />
				<exclude name="${palm}" />
				<exclude name="${samples}" />
				<exclude name="${test}" />
			</fileset>
			<manifest>
				<attribute name="Built-By" value="Choco administrators" />
				<attribute name="Class-Path" value="${lib.automaton}" />
                <attribute name="Main-class" value="parser.chocogen.XmlSolver" />
            </manifest>
		</jar>
		<echo message="successfull jar-4-test creation" />
	</target>

    <!-- - - - - - - - - - - - - - - - - -
          target: compile-test
         - - - - - - - - - - - - - - - - - -->
	<target name="compile-test">
		<!-- Compile the java code from ${test} into ${build} -->
		<javac srcdir="${dev}/test" destdir="${build}" source="${jdk.source}">
			<classpath refid="choco.classpath" />
		</javac>
		<echo message="successfull test compilation" />
	</target>


	<!-- =================================
          target: exec-junit-test
         ================================= -->

	<fileset id="junit.results" dir="${doc}">
		<include name="TEST-*.xml" />
		<exclude name="TESTS-TestSuites.xml" />
	</fileset>


	<target name="exec-junit-test" depends="clean,chocoMkdir,compile,compile-test" description="--> executes all junit tests.">
		<echo>You need to have junit.jar and ant-junit.jar in the ant classpath to run this task.</echo>
		<junit printsummary="yes" haltonfailure="no" filtertrace="on" maxmemory="1024m" dir="${basedir}">
			<sysproperty key="basedir" value="${basedir}" />
			<classpath refid="choco.classpath" />
			<formatter type="xml" />
			<!--WARNING : with fork set to no, some tests can fail -->
			<batchtest fork="yes" todir="${doc}">
				<fileset dir="${dev}">
					<!-- <include name="**/Test*.java"/> -->
					<include name="test/TestSuite.java" />
				</fileset>
			</batchtest>
		</junit>
		<junitreport todir="${doc}">
			<fileset refid="junit.results" />
			<report format="frames" todir="${junit.reports}" />
		</junitreport>
		<delete>
			<fileset refid="junit.results" />
		</delete>
	</target>


	<!-- - - - - - - - - - - - - - - - - -
          target: exec-cpd
         - - - - - - - - - - - - - - - - - -->
	<fileset dir="${src}" id="choco.src">
		<include name="**/*.java" />
	</fileset>

	<target name="exec-cpd">
		<taskdef name="cpd" classname="net.sourceforge.pmd.cpd.CPDTask" />
		<cpd minimumTokenCount="100" ignoreLiterals="true" outputFile="${doc}/cpd_duplicate_code.txt">
			<fileset refid="choco.src" />
		</cpd>
	</target>



	<!-- =================================
          target: exec-pmd
         ================================= -->




	<target name="exec-pmd" depends="exec-cpd" description="--> analyzes code with PMD and CPD">
		<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" />
		<pmd shortFilenames="true" targetjdk="1.6" rulesetfiles="${choco.ruleset}" minimumpriority="${pmd.priority}">
			<!-- <formatter type="summaryhtml" toFile="${doc}/pmd_report.html"/> -->
			<formatter type="xml" toFile="${doc}/pmd-report.xml" />
			<fileset refid="choco.src" />
		</pmd>
		<echo>pmd report done </echo>
		<xslt in="${doc}/pmd-report.xml" style="${pmd.xslt}" out="${doc}/pmd-report.html" />
	</target>

</project>
